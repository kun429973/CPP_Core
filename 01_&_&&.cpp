#include <iostream>

//左值引用& 与 右值引用&& 的区别
/**
1,定义:
1.1，左值引用（Lvalue Reference）： 左值引用是对左值的引用，通过使用&符号声明。左值是指内存中有确切存储位置的对象
1.2，右值引用（Rvalue Reference）： 右值引用是对右值的引用，通过使用&&符号声明。右值是指那些没有确切存储位置的临时对象，如表达式的结果、字面常量等。

2,生命周期：
左值引用： 通常与左值关联，生命周期通常与引用的对象相同。
右值引用： 通常与右值关联，生命周期通常是短暂的，例如临时表达式的值。

3,用途：
左值引用： 主要用于修改引用对象的值，传递函数参数，以及创建拷贝构造函数和赋值运算符重载等。
右值引用： 主要用于实现移动语义，提高资源管理的效率，例如在C++11中引入的移动构造函数和移动赋值运算符。

4,移动语义：
左值引用： 不能直接实现移动语义。它们通常导致深拷贝，即在内存中创建对象的新副本。
右值引用： 通过支持移动语义，可以将资源的所有权从一个对象转移到另一个对象，而不进行不必要的深拷贝，提高了性能。
**/

int main() {

    //左值引用
    int x = 10;
    int &ref = x; // ref是对x的左值引用

    //右值引用
    int &&a = 5; // rref是对右值的引用
    int&& b = std::move(a);  // 通过 std::move 转移对象, 相当于新建一个指针指向b，所以b改变，a的值也改变。
    b = 33;
    std::cout<< "a: " << a << std::endl;

}